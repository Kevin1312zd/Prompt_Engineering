Multilingual and Cross-lingual Prompting

Overview

This tutorial explores the concepts and techniques of multilingual and cross-lingual
prompting in the context of large language models. We'll focus on designing prompts
that work effectively across multiple languages and implement techniques for
language translation tasks.

Motivation

As Al language models become increasingly sophisticated, there's a growing need to
leverage their capabilities across linguistic boundaries. Multilingual and cross-lingual
prompting techniques allow us to create more inclusive and globally accessible Al
applications, breaking down language barriers and enabling seamless communication
across diverse linguistic landscapes.

Key Components

1. Multilingual Prompt Design: Strategies for creating prompts that work effectively
in multiple languages.

2. Language Detection and Adaptation: Techniques for identifying the input
language and adapting the model's response accordingly.

3. Cross-lingual Translation: Methods for using language models to perform
translation tasks between different languages.

4. Prompt Templating for Multilingual Support: Using LangChain's PromptTemplate
for creating flexible, language-aware prompts.

5. Handling Non-Latin Scripts: Considerations and techniques for working with
languages that use non-Latin alphabets.

Method Details

We'll use OpenAl's GPT-4 model via the LangChain library to demonstrate
multilingual and cross-lingual prompting techniques. Our approach includes:

Setting up the environment with necessary libraries and API keys.
Creating multilingual prompts using LangChain's PromptTemplate.
Implementing language detection and response adaptation.
Designing prompts for cross-lingual translation tasks.

Handling various writing systems and scripts.

On PWN Ss

Exploring techniques for improving translation quality and cultural sensitivity.
In [1]:

In [ ]:

Throughout the tutorial, we'll provide examples in multiple languages to illustrate the
concepts and techniques discussed.

Conclusion

By the end of this tutorial, you will have gained practical skills in designing and
implementing multilingual and cross-lingual prompts. These techniques will enable
you to create more inclusive and globally accessible Al applications, leveraging the
power of large language models across diverse linguistic contexts. The knowledge
gained here forms a foundation for developing sophisticated, language-aware Al
systems capable of breaking down communication barriers on a global scale.

Setup

First, let's import the necessary libraries and set up our environment.

import os

from langchain_openai import ChatOpenAI

from langchain.prompts import PromptTemplate
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Set up OpenAI API key
os.environ["OPENAI_API_KEY"] = os.getenv( 'OPENAI_API_KEY')

# Initialize the language model
llm = ChatOpenAI (model="gpt-40-mini")

# Helper function to print responses

def print_response( response):
print( response. content)

Multilingual Prompt Design

Let's start by creating a multilingual greeting prompt that adapts to different
languages.

multilingual_greeting = PromptTemplate(
input_variables=["'language"],

template="Greet the user in {language} and provide a short introduct

)

# Test the multilingual greeting prompt
languages = ["English", "Spanish", "French", "German", '"Japanese'']

for lang in languages:
prompt = multilingual_greeting. format ( Language=lang)
In [3]:

response = 11m. invoke( prompt)
print(f''{lang}:")
print_response( response)
print()

English:

Hello! Today, let’s talk about the weather in the United States. The weath
er can vary greatly from coast to coast and even within regions. For insta
nce, while the East Coast may be experiencing chilly temperatures and the
colors of autumn foliage, the West Coast might enjoy milder temperatures a
nd sunny skies. In the Midwest, you might see the first signs of winter ap
proaching, with cooler temperatures and possibly some early snowfall. Over
all, the diverse geography and climate zones across the country make for a
dynamic weather experience year-round!

Spanish:

iHola! En Espafia, el clima varia significativamente dependiendo de la regi
6n. En el norte, como en Galicia, puedes esperar un clima mas fresco y llu
vioso, mientras que en el sur, como en Andalucia, las temperaturas suelen
ser mucho mas calidas y soleadas, especialmente en verano. Durante la prim
avera y el otofio, el clima es generalmente agradable, lo que hace de estas
temporadas una buena época para visitar. éTe gustaria saber mas sobre el c
lima en alguna regidn especifica?

French:

Bonjour ! En France, le temps peut varier considérablement selon les régio
ns. Par exemple, dans le sud, comme a Nice, le climat est généralement méd
iterranéen avec des étés chauds et secs, tandis qu'a Paris, les hivers peu
vent étre frais et pluvieux. Actuellement, il est important de vérifier le
s prévisions locales pour planifier vos activités en plein air. Quelles so
nt vos destinations préférées en France ?

German:

Hallo! In Deutschland ist das Wetter im Herbst oft wechselhaft. Wahrend di
eser Zeit kénnen Sie sonnige Tage erleben, gefolgt von kihleren, regnerisc
hen Perioden. Die Temperaturen variieren normalerweise zwischen 1@ und 15

Grad Celsius, und die bunten Blatter der Baume schaffen eine malerische Ku
lisse. Es ist eine schéne Zeit, um die Natur zu genie&en und vielleicht ei
nen Spaziergang im Park zu machen!

Japanese:

CANCSIA! AROKRICOUITY LANULETH. ARORA IC Kho CTRRUETD, —
RANICASAIEVULTUNES., RIClIROKS, BRGRADRLOET, Bltamsia
GC. SICH CABE DS <RELES. MIA KURLADOU, ARMSLNSHCT. ZS
UC S ISIE CIA B DEW. AE-PBRUDARCT. AROKRILSRC, BNSEVUICML
WHER DDUET KH!

Language Detection and Adaptation

Now, let's create a prompt that can detect the input language and respond
accordingly.

language_adaptive_prompt = PromptTemplate(
input_variables=["user_input"],
template="""Detect the language of the following input and respond i
User input: {user_input}
Your response (in the detected Language) :"""
In [4]:

)

# Test the language adaptive prompt
inputs = [
"Hello, how are you?",
"Hola, écémo estas?",
"Bonjour, comment allez-vous ?",
"ZAICSIA, STAMCT A? ",
"3npaBcTByuTe, Kak jena?"

for user_input in inputs:
prompt = language_adaptive_prompt. format(user_input=user_input)
response = 11m. invoke( prompt)
print(f'Input: {user_input}")
print("Response:")
print_response( response)
print()

Input: Hello, how are you?
Response:
Hello! I'm doing well, thank you. How about you?

Input: Hola, écémo estas?
Response:
iHola! Estoy bien, gracias. éY tu?

Input: Bonjour, comment allez—vous ?
Response:
Bonjour ! Je vais bien, merci. Et vous, comment allez-vous ?

Input: CAlcSlA, HARACT HD?
Response:
CAACBIA! ALATACT., BAEAUIDMSCT Dy?

Input: 3qpaBcTByWte, Kak pena?
Response:
3ppapctByute! Y meHs Bcé xopowo, cnacu6o. A Kak y Bac?

Cross-lingual Translation

Let's implement a prompt for cross-lingual translation tasks.

translation_prompt = PromptTemplate(
input_variables=["source_lang", "target_lang", "text"],
template="""Translate the following text from {source_lang} to {targ)
{source_lang} text: {text}
{target_lang} translation:"""

)

# Test the translation prompt

translations = [
{"source_lang": "English", “target_lang": "French", "text": "The qui
{"source_lang": "Spanish", “target_lang": "German", "text": "La vida
{"source_lang": "Japanese", "target_lang": "English", "text": "ROE
for t in translations:
prompt = translation_prompt. format (xt)
response = 11m. invoke( prompt)
print(f"From {t['source_lang']} to {t['target_lang']}:")
print(f"Original: {t['text']}")
print("Translation:")
print_response( response)
print()

From English to French:

Original: The quick brown fox jumps over the lazy dog.
Translation:

La rapide renarde brune saute par-dessus le chien paresseux.

From Spanish to German:
Original: La vida es bella.
Translation:

Das Leben ist schon.

From Japanese to English:

Original: OTOH CT.

Translation:

The cherry blossoms are in full bloom.

Handling Non-Latin Scripts

Let's create a prompt that can work with non-Latin scripts and provide transliteration.

In [5]: non_latin_prompt = PromptTemplate(

input_variables=["text", "script"],

template="""Provide the following information for the given text:
1. The original text

2. The name of the script/writing system

3. A transliteration to Latin alphabet

4. An English translation

Text: {text}
Script: {script}

)

# Test the non-Latin script prompt

non_latin_texts = [
{"text": "CAl(cSlk, He", "script": "Japanese"},
{"text": "3opapctByi, mup", "script": "Cyrillic"},
{"text": "aed gar, "script": "Devanagari"}

for text in non_latin_texts:
prompt = non_latin_prompt. format(*«xtext)
response = 11m. invoke( prompt)
print_response( response)
print()
1. The original text: CAIcS(t, HR

2. The name of the script/writing system: Japanese

3. A transliteration to Latin alphabet: Konnichiwa, sekai
4. An English translation: Hello, world

1. The original text: 3gpaBctTByu, mup

2. The name of the script/writing system: Cyrillic

3. A transliteration to Latin alphabet: Zdravstvuy, mir
4. An English translation: Hello, world

1. The original text: Ta ghar

2. The name of the script/writing system: Devanagari

3. A transliteration to Latin alphabet: Namaste Duniya
4. An English translation: Hello, world

Improving Translation Quality and Cultural
Sensitivity

Finally, let's create a prompt that focuses on maintaining cultural context and idioms
in translation.

In [6]:  cyltural_translation_prompt = PromptTemplate(

input_variables=["source_lang", "target_lang", "text"],
template="""Translate the following text from {source_lang} to {targ)
1. A direct translation

2. A culturally adapted translation (if different)

3. Explanations of any cultural nuances or idioms

{source_lang} text: {text}
{target_lang} translation and explanation:"""

)

# Test the cultural translation prompt
cultural_texts = [

{"source_lang'": "English", “target_lang": "Japanese", "text": "It's
{"source_lang": "French", "target_lang": "English", "text": "Je suis
{"source_lang': "Spanish", "“target_lang": "German", "text": "Cuesta

for text in cultural_texts:
prompt = cultural_translation_prompt. format (**xtext)
response = 11m. invoke( prompt)
print(f"From {text['source_lang']} to {text['target_lang']}:")
print(f"Original: {text['text']}")
print("Translation and Explanation:")
print_response( response)
print()

From English to Japanese:
Original: It's raining cats and dogs.
Translation and Explanation:
1. **Direct Translation: *«
JEPA DED TUS.
(Neko ya inu ga futte iru.)

2. **kCulturally Adapted Translation:«x
WBEU TE,
(Doshaburi da.)

3. **kExplanations of Cultural Nuances or Idioms :*x

- The direct translation "J8*PAADVED TLS" is a literal interpretation
of the English idiom "It's raining cats and dogs." However, this expressio
n does not hold any meaning in Japanese culture and would likely cause con
fusion.

- The culturally adapted translation "+#)>—%U 7" (doshaburi da) means "
it's pouring rain" or "it's coming down in buckets." This phrase is common
ly used in Japan to describe very heavy rain and is easily understood by J
apanese speakers.

- The idiom "raining cats and dogs" emphasizes the intensity of the rai
n in a colorful way, which is not directly translatable to Japanese. Inste
ad, the adapted phrase captures the essence of heavy rainfall in a way tha
t resonates with Japanese speakers.

From French to English:

Original: Je suis dans le pétrin.

Translation and Explanation:

1. **kDirect Translationx*x: I am in the dough.

2. **Culturally Adapted Translation**«: I am in a tough spot.

3. **kExplanations of Cultural Nuances or Idioms*x:

- The phrase "Je suis dans le pétrin" literally translates to "I am in
the dough," which refers to being in a difficult or complicated situation.
The term "pétrin" originally refers to a mixing bowl used for kneading dou
gh in baking. Over time, it has evolved into an idiomatic expression in Fr
ench that signifies being stuck in a problem or facing trouble.

- In English, the adapted version "I am in a tough spot" conveys a simi
lar sense of being in a challenging situation, making it more relatable fo
r English speakers. The cultural context of using food-related metaphors i
s common in many languages, but the specific expression would likely not b
e understood without explanation if translated literally.

From Spanish to German:

Original: Cuesta un ojo de la cara.
Translation and Explanation:

### 1. Direct Translation:

"Es kostet ein Auge aus dem Gesicht."

### 2. Culturally Adapted Translation:
"Es kostet ein Vermdgen."

### 3. Explanation of Cultural Nuances or Idioms:

- **Direct Translation**: The phrase "Es kostet ein ojo de la cara" litera
lly translates to "It costs an eye out of the face." This expression is us
ed in Spanish to convey that something is very expensive, implying a signi
ficant sacrifice for the expense.

- *«kCulturally Adapted Translationx*x: The adapted phrase "Es kostet ein Ve
rmégen" means "It costs a fortune." This expression is more commonly used
in German. While both phrases communicate the idea of high expense, "ein V
ermégen" is a neutral term that is widely understood in financial context
S.

- *kCultural Nuances*k: The original Spanish idiom emphasizes the idea of

sacrificing something valuable (an eye) for something costly, which can ev
oke strong imagery about loss and value. In contrast, the German expressio
n focuses on the financial aspect without the same vivid imagery, reflecti
ng a more straightforward approach to discussing costs. This difference il
lustrates how various cultures use metaphorical language to express simila
r concepts while maintaining their own unique flavors and connotations.
